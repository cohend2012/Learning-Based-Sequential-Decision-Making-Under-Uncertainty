%Dan Cohen 
% HW 2
% POMDP beam projection on the road 

clear all
clc 

N = 1000;
K = 1000;
%S = [1,2];

P0 =[0.5,0.5];
bel = P0;
q = 0.1;
error = q;
Q = 10;
actions = [0,1,2];
l = 1;

B_tilta = [(l-1)/(Q-1) ; (Q-l)/(Q-1)];
Transistion = eye(2)*(1-q)+[0,q;q,0];
Bits = 1;
total_bits = 0 ;


good_signal = 1-error;

profit = [ 0 Bits 0; 0 0 Bits];



rng(0); % seed random var for matlab so aid in direct comparision of code 
for i =1:K
    
    U_vector(i)=rand;
    
    G(i)=-log(-log(U_vector(i)));
    
end 


Uniform_var = rand;
G(1) = -log(-log(Uniform_var));


k_m1 = 1;
%k = linspace(1, k, k);
S = zeros(1,K); % stock level

for stage =1:K
    
    
    
    U_vector=rand(1,2);
    
    G = -log(-log(U_vector));
    
    
    [maxV,index] = max(G + log(Transistion(k_m1,1:2))) ;
    S(stage) = index;
    k_m1 = S(stage);
    
    
    
end 






P{1} = [good_signal,error; ...
        error,good_signal]

P{2} = zeros(2)

P{3} = zeros(2)



V = zeros(2,100);
B = bel;
K_ = 1000; % creating the K 
while K_ >0
    for i=1:M
        for act=1:M
            
            curr_val =0 ;
            curr_val = B(i)*profit(i,act) ;
            curr_val = avg_profit(i,act)+Transition{act}(i,:)*V(:,K_);
            if K_-1<=0 % if we run out of inter the break out
                break
            end
            %V(i,k-1) = max(V(i,k-1),curr_val)
            if V(i,K_-1) < curr_val % if the clac curr val is biger then we need to reset the V(State at that stage)
                V(i,K_-1) = curr_val;
                recored_actions(K_) = act;
                recored_index(K_)   = i;
                
            end
        end
        
    end
    
    K_ = K_ - 1; % decrement K
    
end







for N=1:1000
    
    %S = randi(2,1,1)
    
    % random policy part a
    random_policy = randi(2,1,1)
    
    if(S(N) == random_policy)
        total_bits = total_bits + Bits
        
    else 
        total_bits = total_bits +0
        
    end 
  
end 


avg_amount_bits_pers_stage_part_a = (1/N)*total_bits

total_bits =0;
feedback_y = 0;
count = 0;
for N=1:1000
    
    
    %S = randi(2,1,1)
    
    % random policy part a
    
    beam_train = Y(N)
    
    
    if(count == 1)
        count = 0;
        
        if S(N) == bad__feedback_policy
            total_bits = total_bits + Bits;
            
        else 
            total_bits = total_bits +0;
        end 
        
    end
    
    
    
    if mod(N,2)==0
        
        feedback_y = S(N);
        
        
    else 
        bad__feedback_policy = feedback_y;
        
    end 
    
    %random_policy = randi(2,1,1)
    
    


    count = count + 1;
  
end 


avg_amount_bits_pers_stage_part_b = (1/N)*total_bits

function [B] = CalcBel(B,u,y)




end






