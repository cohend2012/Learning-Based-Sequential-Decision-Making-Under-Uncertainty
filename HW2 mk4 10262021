%Dan Cohen 
% HW 2
% POMDP beam projection on the road 

clear all
clc 

N = 1000;
K = 1000;
%S = [1,2];

P0 =[0.5,0.5];
bel = P0;
q = 0.1;
error = q;
Q = 10;
actions = [0,1,2];
l = 1:Q;

B_tilda = transpose([(l-1)/(Q-1) ; (Q-l)/(Q-1)]);
alpha = {};
alpha{100} = zeros(10,2);
alpha{101} = zeros(10,2);
alpha{102} = zeros(10,2);
Transistion = eye(2)*(1-q)+[0,q;q,0];
Bits = 1;
total_bits = 0 ;


good_signal = 1-error;

profit = [ 0 Bits 0; 0 0 Bits]; % state vs action with a reward

 

Transistion2 = [1-error 0; 0 1-error ];

%V = ones(2,1000)*-inf;
B = bel;
%K_ = 1000; % creating the K 
% Termal cost can be added in
termal_profit = 0;
termal_profit_save = zeros(2,1);
% for i=1:length(bel)
%     
%     termal_profit = 0;
%     for ii=1:length(bel)
%         termal_profit = termal_profit+bel(ii)*Bits;
%         
%     end
%     
%     termal_profit_save(i) = termal_profit;
%     
% end 


%V(:,end) = termal_profit_save; % load in termal profit
save_B = zeros(2,1000);
B_l =zeros(1,2);
recored_actions{K} = {};
for K = 100+1:-1:1
    %K_ = index; % creating the K from the notes
    
    %while K_ >0
    
    % while loop
    %y = Y(K); %signal output
    for l = 1:Q
        B_l = B_tilda(l,:);
        V_tilta(K) = V_tildaN_k_1(B_l,alpha{K+1});
        curr_val_old = 1*-inf;
        for act =1:length(actions)
            curr_val =0; 
            inter_cost =0;
            for i = 1:2
                curr_val = B_l(i)*profit(i,act);  
                for yy=1:2
                    
                    if act~=1 
                        yy=0;
                        
                    end 
                        
                    
                    inter_cost  = inter_cost+ TrueSig(yy,i,act)*V_tilta(K);
                end
                curr_val = curr_val+B_l(i)*inter_cost;
                
                if  curr_val_old < curr_val % if the clac curr val is biger then we need to reset the V(State at that stage)
                    curr_val_old = curr_val;
                    recored_actions{K}(l,:) = act;
                    opt_act = act;
                    recored_index(K)   = i;
                end
            end       
        end
        
       [alpha_y_K_1,best_l] = V_tildaN_k_1_OPT(B_l,opt_act,alpha{K+1});
      
       %alpha{K+1}(best_l,:) = alpha{K}(I(1),:);
            
       alpha_value = 0;
       for i=1:2
           for y =1:2
               if opt_act~=1
                   y =0;
               end 
                   
                   
               for j=1:2
                   alpha_value= alpha_value+ TrueSig(y,i,opt_act)*alpha_y_K_1(j);
               end
           end
           alpha_value = alpha_value+profit(i,opt_act);
           
           alpha{K}(l,i) = alpha_value;
       end

    end

end

    


parta = zeros(1,100);
partb = zeros(1,100);
partc = zeros(1,100);

for realization = 1:100
    %% generate states and feedback
    K = 1000;
    for i =1:K+1
        
        U_vector(i)=rand;
        
        G(i)=-log(-log(U_vector(i)));
        
    end
    
    
    Uniform_var = rand;
    G(1) = -log(-log(Uniform_var));
    
    
    k_m1 = 1;
    
    S = zeros(1,K+1); % state over states
    
    for stage =1:K+1
        U_vector=rand(1,2);
        G = -log(-log(U_vector));
        [maxV,index] = max(G + log(Transistion(k_m1,1:2))) ;
        S(stage) = index;
        k_m1 = S(stage);
        
    end
    
    
    
    Y = zeros(1,K); % stock level
    mask = (S == 1);
    Y = S; % mirror that state
    for stage =1:K+1
        
        
        
        rand_number= randi(10,1,1);
        
        if(rand_number == 10) % add error at a 10% rate
            
            if(mask(stage) == 1)
                Y(stage) =2;
            else
                Y(stage) =1;
                
            end
            
            
        end
        
        
        
        % rand num gen (1-10) then flip flat white noise
        
    end

    
    %% Policy a 
    
    % part a not looking at feedback
    total_bits = 0;
    for N=1:1000
        
        %S = randi(2,1,1)
        
        % random policy part a
        random_policy = randi(2,1,1);
        
        if(S(N) == random_policy)
            total_bits = total_bits + Bits;
            
        else
            total_bits = total_bits +0;
            
        end
        
    end
    
    
    avg_amount_bits_pers_stage_part_a = (1/1000)*total_bits;
    
    parta(realization) = avg_amount_bits_pers_stage_part_a;
    
    
    
    
    %% Policy b 
    
    
    % part b with feedback and but have to wait one timestep
    
    total_bits =0;
    feedback_y = 0;
    count = 0;
    bad__feedback_policy =0;
    for N=1:1000
      
        
        % random policy part a
        
        beam_train = randi(2,1,1); % needs to be fixed

        if S(N) == bad__feedback_policy
            total_bits = total_bits + Bits;
            
        else
            total_bits = total_bits +0;
        end

        if mod(N,2)==0
            
            feedback_y = S(N);
            bad__feedback_policy =0;
            
        else
            bad__feedback_policy = feedback_y;
            
        end
        
        %random_policy = randi(2,1,1)

        count = count + 1;
        
    end
    
    
    avg_amount_bits_pers_stage_part_b = (1/1000)*total_bits;
    partb(realization) = avg_amount_bits_pers_stage_part_b;
    
    %% Policy c 
    
    total_bits = 0;
    B = bel;

    for index=1:1000
        
        
        y = Y(index);
        
        %record(index) = loc;
        
        for act =1:3
            V_max =0;
            Value_new =0;
            Value_old =0;
            for i=1:2
                Value_new = Value_new+profit(i,act);
                for y = 1:2
                    if act~=1
                        y =0;
                    end
                    
                    for l = 1:Q
                        V_max = max(V_max,dot(CalcBel(B,act,y),alpha{1}(l,:)));
                    end
                    
                    Value_new = Value_new+ TrueSig(y,i,act)*V_max;
                end
                Value_new =Value_new*B(i);
            end
            
            if Value_new<Value_old
                Value_old =Value_new;
                opt_act = act;
                
            end
            
        end
        
        
        
        total_bits = total_bits+profit(S(index),opt_act);
        
        
        if opt_act==1
            
            y = Y(index);
            
        else
            y =0;
            
        end
        
        B = CalcBel(B,opt_act,y);
 
    end

    avg_amount_bits_pers_stage_part_c = (1/1000)*total_bits;
  
    partc(realization) = avg_amount_bits_pers_stage_part_c;

end 

figure(1)
plot(partc,'*r')
title('100 Realizations')
xlabel('Realization Index')
ylabel('Percent Sucess'); 

hold on 
plot(parta,'om')
hold on
plot(parta,'gx')




%% Funtions 



function [alpha_y_K_1,best_l] = V_tildaN_k_1_OPT(B,opt_act,alpha)
alpha_y_K_1 = [0 0];
new_val=0;
old_val=0;
best_l =0;
for y=1:2
    if opt_act~=1
        y = 0;   
    end
    for l =1:10

        new_val =dot(CalcBel(B,opt_act,y),alpha(l,:));
        
        if new_val>=old_val
            old_val = new_val;
            best_l = l;

        end 
        
    end
  
end 

alpha_y_K_1 = alpha(best_l,:);


end



function [V_tilda] = V_tildaN_k_1(B,alpha)
V_tilda = 0;
for act= 1:3
    for y=1:2
        if act~=1
           y =0; 
        end
        for l =1:10
            V_tilda=max(V_tilda,dot(CalcBel(B,act,y),alpha(l,:)));
 
        end 

    end 
end 

end


function [B] = CalcBel(B_IN,u,y)
epsilon = 0.10;
q  = 0.10;

u = u-1;

if (u==1||2)
    
    B(1) = B_IN(1)*(1-q)+B_IN(2)*q;
    B(2) = B_IN(1)*q+ B_IN(2)*(1-q);
    
elseif u==0 && y ==1
    
    B(1) = (B_IN(1)*(1-epsilon)*(1-q)+B_IN(2)*epsilon*q)/(B_IN(1)*(1-epsilon)+B_IN(2)*epsilon);
    
    B(2) = (B_IN(1)*(1-epsilon)*(q)+B_IN(2)*epsilon*(1-q))/(B_IN(1)*(1-epsilon)+B_IN(2)*epsilon);
    
elseif u==0 && y==2
    
    B(1) = (B_IN(1)*epsilon*(1-q)+B_IN(2)*(1-epsilon)*(q))/(B_IN(1)*epsilon+B_IN(2)*(1-epsilon));
    
    B(2) = (B_IN(1)*epsilon*(q)+B_IN(2)*(1-epsilon)*(1-q))/(B_IN(1)*epsilon+B_IN(2)*(1-epsilon));
    
    
end
    

 
end

function [tran] = TrueSig(y,i,u)
%
u = u-1;
epsilon = 0.10;


if (u==0)
    
    if y==0 
        tran = 0;
    elseif y==i
        tran = 1-epsilon;
    elseif y~=i
        tran = epsilon;
    end 
  
    
elseif u==1
    
    if y==0 
        tran  = 1;
        
    elseif y~=0
        tran  = 0;
    end 
    
elseif u==2 
    
    if y==0 
        tran  = 1;
        
    elseif y~=0
        tran  = 0;
    end 
    
end
    



end


